{"version":3,"sources":["redux/actions.js","components/DeleteTaskModal.js","components/Board.js","components/NewTaskModal.js","App.js","reportWebVitals.js","redux/reducers/cardsReducer.js","redux/reducers/rootReducer.js","redux/store.js","index.js"],"names":["getCards","dispatch","axios","get","then","res","type","payload","data","catch","err","connect","deleteCard","taskId","delete","props","toggle","modal","setModal","taskName","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","Button","color","onClick","state","cards","console","log","useState","className","scope","map","el","i","name","description","status","priority","_id","addCard","newTaskObject","post","newTaskName","setNewTaskName","newTaskDescription","setNewTaskDescription","newTaskStatus","setNewTaskStatus","newTaskPriority","setNewTaskPriority","htmlFor","value","onChange","e","target","id","aria-label","defaultValue","Math","random","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","cardsReducer","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1e807ff.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n\r\nexport function getCards() {\r\n    return (dispatch) => {\r\n        axios.get('http://nazarov-kanban-server.herokuapp.com/card')\r\n            .then(res => {\r\n                dispatch({\r\n                    type: 'GET_CARDS',\r\n                    payload: res.data,\r\n                })\r\n            })\r\n            .catch(err => err)\r\n    }\r\n}\r\n\r\nexport function addCard(newTaskObject) {\r\n    return (dispatch) => {\r\n        axios.post('http://nazarov-kanban-server.herokuapp.com/card', newTaskObject)\r\n            .then(res => {\r\n                dispatch(getCards())\r\n                // dispatch({\r\n                //     type: 'ADD_CARD',\r\n                //     payload: res.data,\r\n                // })\r\n            })\r\n            .catch(err => err)\r\n    }\r\n}\r\n\r\nexport function deleteCard(taskId) {\r\n    return (dispatch) => {\r\n        axios.delete(`http://nazarov-kanban-server.herokuapp.com/card/${taskId}`)\r\n            .then(res => {\r\n                dispatch(getCards())\r\n                // dispatch({\r\n                //     type: 'DELETE_CARD',\r\n                //     payload: res.data,\r\n                // })\r\n            })\r\n            .catch(err => err)\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\nimport connect from \"react-redux/lib/connect/connect\";\r\nimport { deleteCard } from \"../redux/actions\";\r\n\r\nfunction DeleteTaskModal(props) {\r\n\r\n    const {toggle, modal,setModal,taskId,taskName} = props;\r\n\r\n    function deleteButtonHandler(){\r\n        props.deleteCard(taskId)\r\n        setModal(!modal)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal isOpen={modal} toggle={toggle}>\r\n                <ModalHeader toggle={toggle}> Delete the following Task?</ModalHeader>\r\n                <ModalBody>\r\n                    {taskName}\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={deleteButtonHandler}> Delete </Button>{' '}\r\n                    <Button color=\"secondary\" onClick={toggle}> Cancel </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    deleteCard: (taskId) => dispatch(deleteCard(taskId)),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(DeleteTaskModal);","import React, {useState} from 'react';\r\nimport connect from \"react-redux/lib/connect/connect\";\r\nimport DeleteTaskModal from \"./DeleteTaskModal\";\r\n\r\n\r\nfunction Board(props) {\r\n\r\n    const {cards} = props;\r\n\r\n    console.log(cards)\r\n\r\n    const [modal, setModal] = useState(false);\r\n    const toggle = () => setModal(!modal);\r\n\r\n    return (\r\n        <div>\r\n            <table className=\"table\">\r\n                <thead>\r\n                <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Description</th>\r\n                    <th scope=\"col\">Status</th>\r\n                    <th scope=\"col\">Priority</th>\r\n                    <th scope=\"col\">Action</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {cards.map((el,i) =>\r\n                        <tr key={el._id}>\r\n                            <th scope=\"row\" key={i+1}>{i+1}</th>\r\n                            <td>{el.name}</td>\r\n                            <td>{el.description}</td>\r\n                            <td>{el.status}</td>\r\n                            <td>{el.priority}</td>\r\n                            <td>\r\n                                <button onClick={toggle} type=\"button\" className=\"btn btn-outline-primary btn-sm\"> Delete </button>\r\n                            </td>\r\n                            {modal && <DeleteTaskModal\r\n                                taskId={el._id}\r\n                                taskName={el.name}\r\n                                setModal={setModal}\r\n                                modal={modal}\r\n                                toggle={toggle}/>\r\n                            }\r\n                        </tr>\r\n\r\n                    // <li key={el._id} className=\"mb-3\">\r\n                    //     <button type=\"button\" className=\"btn btn-outline-primary btn-sm\">Delete</button>\r\n                    // </li>\r\n                )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cards: state.cards.cards\r\n})\r\n\r\nexport default connect(mapStateToProps)(Board);\r\n","import React, {useState} from 'react';\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\nimport connect from \"react-redux/lib/connect/connect\";\r\nimport {addCard, getCards} from \"../redux/actions\";\r\n\r\nfunction NewTaskModal(props) {\r\n\r\n    const {toggle, modal,setModal} = props;\r\n\r\n    const [newTaskName, setNewTaskName] = useState('')\r\n    const [newTaskDescription, setNewTaskDescription] = useState('')\r\n    const [newTaskStatus, setNewTaskStatus] = useState('')\r\n    const [newTaskPriority, setNewTaskPriority] = useState('')\r\n\r\n\r\n    function addButtonHandler() {\r\n        const newTaskObject = {\r\n            _id: Math.random(),\r\n            name: newTaskName,\r\n            description: newTaskDescription,\r\n            status: newTaskStatus,\r\n            priority: +newTaskPriority,\r\n        }\r\n        props.addCard(newTaskObject);\r\n        setNewTaskName('')\r\n        setNewTaskDescription('')\r\n        setNewTaskStatus('')\r\n        setNewTaskPriority('')\r\n        setModal(!modal)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal isOpen={modal} toggle={toggle}>\r\n                <ModalHeader toggle={toggle}> Fill in ...</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"mb-3 w-50 inline-item\">\r\n                        <label htmlFor=\"formGroupExampleInput\" className=\"form-label\"> Name: </label>\r\n                        <input\r\n                            value={newTaskName} onChange={(e) => setNewTaskName(e.target.value)}\r\n                            type=\"text\" className=\"form-control\" id=\"name\"/>\r\n                    </div>\r\n                    <div className=\"mb-3 w-50 inline-item\">\r\n                        <label htmlFor=\"formGroupExampleInput\" className=\"form-label\"> Description: </label>\r\n                        <input\r\n                            value={newTaskDescription} onChange={(e) => setNewTaskDescription(e.target.value)}\r\n                            type=\"text\" className=\"form-control\" id=\"description\"/>\r\n                    </div>\r\n                    <label htmlFor=\"formGroupExampleInput\" className=\"form-label\"> Status: </label>\r\n                    <select\r\n                        value={newTaskStatus} onChange={(e) => setNewTaskStatus(e.target.value)}\r\n                        className=\"form-select mb-3 w-auto\" aria-label=\"Default select example\">\r\n                        <option defaultValue={newTaskStatus}>Choose...</option>\r\n                        <option value=\"todo\">Todo</option>\r\n                        <option value=\"progress\">Progress</option>\r\n                        <option value=\"review\">Review</option>\r\n                        <option value=\"done\">Done</option>\r\n                    </select>\r\n                    <label htmlFor=\"formGroupExampleInput\" className=\"form-label\"> Priority: </label>\r\n                    <select\r\n                        value={newTaskPriority} onChange={(e) => setNewTaskPriority(e.target.value)}\r\n                        className=\"form-select mb-3 w-auto\" aria-label=\"Default select example\">\r\n                        <option defaultValue={newTaskPriority}>Choose...</option>\r\n                        <option value=\"1\">1</option>\r\n                        <option value=\"2\">2</option>\r\n                        <option value=\"3\">3</option>\r\n                        <option value=\"4\">4</option>\r\n                        <option value=\"5\">5</option>\r\n                    </select>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={addButtonHandler}> Save </Button>{' '}\r\n                    <Button color=\"secondary\" onClick={toggle}> Cancel </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addCard: (newTaskObject) => dispatch(addCard(newTaskObject)),\r\n    getCards: () => dispatch(getCards()),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(NewTaskModal);","import Board from \"./components/Board\";\nimport connect from \"react-redux/lib/connect/connect\";\nimport React, {useEffect, useState} from \"react\";\nimport {getCards} from \"./redux/actions\";\nimport NewTaskModal from \"./components/NewTaskModal\";\n\nfunction App(props) {\n\n    useEffect(() => {\n        props.getCards()\n    },[])\n\n    const [modal, setModal] = useState(false);\n    const toggle = () => setModal(!modal);\n\n  return (\n    <div className=\"container\">\n\n        <h1 className=\"mb-3\"> Kanban: redux, thunk - Ver.3 </h1>\n\n        <button onClick={toggle} type=\"button\" className=\"btn btn-primary mb-3\">Add Task</button>\n        <NewTaskModal toggle={toggle} modal={modal} setModal={setModal}/>\n\n        <Board />\n\n    </div>\n  );\n}\n\n\nconst mapDispatchToProps = (dispatch) => ({\n    getCards: () => dispatch(getCards()),\n})\n\nexport default connect(null, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    cards: [],\r\n}\r\n\r\nconst cardsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'GET_CARDS':\r\n            return {\r\n                ...state, cards: action.payload\r\n            }\r\n        case 'ADD_CARD':\r\n            return {\r\n                ...state, cards: [...state.cards, {...action.payload}]\r\n            }\r\n        case 'DELETE_CARD':\r\n            return {\r\n                ...state, cards: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default cardsReducer;\r\n\r\n","import {combineReducers} from \"redux\";\r\nimport cardsReducer from \"./cardsReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    cards: cardsReducer,\r\n})\r\n\r\nexport default rootReducer;","import {createStore,applyMiddleware} from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n//специальное расширение для браузера, которое позволяет легко дебажить redux приложения -\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport thunk from 'redux-thunk';\r\n// Redux Thunk это middleware библиотека, которая позволяет вам вызвать action creator, возвращая при этом функцию вместо объекта.\r\n// Функция принимает метод dispatch как аргумент, чтобы после того, как асинхронная операция завершится,\r\n// использовать его для диспатчинга обычного синхронного экшена, внутри тела функции.\r\n\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\r\n\r\nexport default store;\r\n\r\n// Метод composeWithDevTools это улучшеный метод compose, который автоматически добавляет devtools к всему, что мы передали ему внутрь.\r\n// Внутри мы вызываем applyMiddleware, которая принимает в качесте аргументов middleware и применяет их.\r\n// То есть теперь если мы захотим добавить еще какую-то middleware, мы просто добавим ее через запятую.\r\n// Пока же мы применили только middleware thunk для асинхронных екшенов.\r\n//\r\n// Такой код обычно дублируется из проекта в проект и особо не отличается.\r\n\r\n// redux-devtools. Это специальное расширение для браузера, которое позволяет легко дебажить redux приложения.\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Provider from \"react-redux/lib/components/Provider\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}